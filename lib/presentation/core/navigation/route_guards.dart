import 'package:flutter/material.dart';
import 'package:agbantche/presentation/core/navigation/route_names.dart';

/// √ânum√©ration des types d'utilisateurs pour la gestion des permissions
enum UserType { guest, customer, transporter, admin }

/// Service de gestion des guards de navigation
/// Contr√¥le l'acc√®s aux routes en fonction du statut d'authentification et du type d'utilisateur
class RouteGuards {
  // √âtat d'authentification simul√© (√† remplacer par un vrai service d'auth)
  static bool _isAuthenticated = false;
  static UserType _currentUserType = UserType.guest;

  // Getters pour l'√©tat actuel
  static bool get isAuthenticated => _isAuthenticated;
  static UserType get currentUserType => _currentUserType;

  // M√©thodes pour simuler l'authentification (√† remplacer par un vrai service)
  static void setAuthenticated(bool authenticated, [UserType? userType]) {
    _isAuthenticated = authenticated;
    if (userType != null) {
      _currentUserType = userType;
    } else if (!authenticated) {
      _currentUserType = UserType.guest;
    }
  }

  /// V√©rifie si l'utilisateur peut acc√©der √† une route donn√©e
  static bool canAccessRoute(String route) {
    final routePath = route.split('?').first; // Enlever les param√®tres de query

    // Debug: Afficher l'√©tat d'authentification
    debugPrint('üîê V√©rification d\'acc√®s pour route: $routePath');
    debugPrint('üîê Authentifi√©: $_isAuthenticated, Type: $_currentUserType');

    // Routes publiques : toujours accessibles
    if (RouteNames.publicRoutes.contains(routePath)) {
      debugPrint('üîê Route publique - Acc√®s autoris√©');
      return true;
    }

    // Routes prot√©g√©es : n√©cessitent une authentification
    if (RouteNames.protectedRoutes.contains(routePath)) {
      final hasAccess =
          _isAuthenticated &&
          (_currentUserType == UserType.customer ||
              _currentUserType == UserType.admin);
      debugPrint('üîê Route prot√©g√©e - Acc√®s: $hasAccess');
      return hasAccess;
    }

    // Routes transporteur : n√©cessitent d'√™tre connect√© en tant que transporteur
    if (RouteNames.transporterRoutes.contains(routePath)) {
      final hasAccess =
          _isAuthenticated &&
          (_currentUserType == UserType.transporter ||
              _currentUserType == UserType.admin);
      debugPrint('üîê Route transporteur - Acc√®s: $hasAccess');
      return hasAccess;
    }

    // Route inconnue : refuser l'acc√®s
    debugPrint('üîê Route inconnue - Acc√®s refus√©');
    return false;
  }

  /// Retourne la route de redirection appropri√©e si l'acc√®s est refus√©
  static String getRedirectRoute(String attemptedRoute) {
    final routePath = attemptedRoute.split('?').first;

    // Si pas authentifi√© et tentative d'acc√®s √† une route prot√©g√©e
    if (!_isAuthenticated &&
        (RouteNames.protectedRoutes.contains(routePath) ||
            RouteNames.transporterRoutes.contains(routePath))) {
      return RouteNames.login;
    }

    // Si authentifi√© mais mauvais type d'utilisateur
    if (_isAuthenticated) {
      if (RouteNames.transporterRoutes.contains(routePath) &&
          _currentUserType != UserType.transporter &&
          _currentUserType != UserType.admin) {
        return RouteNames.customerHome;
      }

      if (RouteNames.protectedRoutes.contains(routePath) &&
          _currentUserType != UserType.customer &&
          _currentUserType != UserType.admin) {
        return RouteNames.transporterHome;
      }
    }

    // Route par d√©faut en cas d'erreur
    return RouteNames.welcome;
  }

  /// D√©termine la route d'accueil appropri√©e selon le type d'utilisateur
  static String getHomeRoute() {
    if (!_isAuthenticated) {
      return RouteNames.welcome;
    }

    switch (_currentUserType) {
      case UserType.customer:
        return RouteNames.customerHome;
      case UserType.transporter:
        return RouteNames.transporterHome;
      case UserType.admin:
        return RouteNames
            .customerHome; // Les admins voient l'interface client par d√©faut
      case UserType.guest:
      default:
        return RouteNames.welcome;
    }
  }

  /// V√©rifie si l'utilisateur peut effectuer une action sp√©cifique
  static bool canPerformAction(String action) {
    switch (action) {
      case 'create_parcel':
        return _isAuthenticated &&
            (_currentUserType == UserType.customer ||
                _currentUserType == UserType.admin);

      case 'accept_order':
        return _isAuthenticated &&
            (_currentUserType == UserType.transporter ||
                _currentUserType == UserType.admin);

      case 'track_parcel':
        return true; // Accessible √† tous

      case 'manage_users':
        return _isAuthenticated && _currentUserType == UserType.admin;

      default:
        return false;
    }
  }

  /// Middleware pour v√©rifier l'acc√®s avant la navigation
  static bool checkAccess(String route, BuildContext context) {
    if (canAccessRoute(route)) {
      return true;
    }

    // Rediriger vers la route appropri√©e
    final redirectRoute = getRedirectRoute(route);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Navigator.of(context).pushReplacementNamed(redirectRoute);
    });

    return false;
  }

  /// D√©connexion : remet l'√©tat √† guest
  static void logout() {
    _isAuthenticated = false;
    _currentUserType = UserType.guest;
  }
}
